//下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。
//        010000
//        000100
//        001001
//        110000
//
//        迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。
//
//        对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫， 一共 10 步。其中 D、U、L、R 分别表示向下、向上、向左、向右走。
//
//        对于下面这个更复杂的迷宫（30 行 50 列），请找出一种通过迷宫的方式， 其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。 请注意在字典序中D<L<R<U。（如果你把以下文字复制到文本文件中，请务 必检查复制的内容是否与文档中的一致。在试题目录下有一个文件 maze.txt， 内容与下面的文本相同）
//


import java.util.LinkedList;


public class test002 {

    LinkedList<String> str_Index=new LinkedList<String>();
    public static void main(String args[]) {
        char map[][] = new char[30][50];
        String[] str = {
                "01010101001011001001010110010110100100001000101010",
                "00001000100000101010010000100000001001100110100101",
                "01111011010010001000001101001011100011000000010000",
                "01000000001010100011010000101000001010101011001011",
                "00011111000000101000010010100010100000101100000000",
                "11001000110101000010101100011010011010101011110111",
                "00011011010101001001001010000001000101001110000000",
                "10100000101000100110101010111110011000010000111010",
                "00111000001010100001100010000001000101001100001001",
                "11000110100001110010001001010101010101010001101000",
                "00010000100100000101001010101110100010101010000101",
                "11100100101001001000010000010101010100100100010100",
                "00000010000000101011001111010001100000101010100011",
                "10101010011100001000011000010110011110110100001000",
                "10101010100001101010100101000010100000111011101001",
                "10000000101100010000101100101101001011100000000100",
                "10101001000000010100100001000100000100011110101001",
                "00101001010101101001010100011010101101110000110101",
                "11001010000100001100000010100101000001000111000010",
                "00001000110000110101101000000100101001001000011101",
                "10100101000101000000001110110010110101101010100001",
                "00101000010000110101010000100010001001000100010101",
                "10100001000110010001000010101001010101011111010010",
                "00000100101000000110010100101001000001000000000010",
                "11010000001001110111001001000011101001011011101000",
                "00000110100010001000100000001000011101000000110011",
                "10101000101000100010001111100010101001010000001000",
                "10000010100101001010110000000100101010001011101000",
                "00111100001000010000000110111000000001000000001011",
                "10000001100111010111010001000110111010101101111000"
        };



        //初始化
        for (int i = 0; i < 30; i++) {
            System.out.print("\n");
            for (int j = 0; j < 50; j++) {
                map[i][j] = str[i].charAt(j);
                System.out.print(map[i][j] + " ");
            }
        }
        System.out.print("start");

        new test002().bfs(map);
        //
        System.out.print("end");
    }

    class Node {
        int x;
        int y;
        String dis = "";
        Node lastnode = null;

        public Node(int x1, int y1, String dis1, Node lastnode1) {
            this.x = x1;
            this.y = y1;
            this.dis = dis1;
            this.lastnode = lastnode1;
        }
    }

    public void bfs(char[][] map) {

        int[][] fangxiang = {
                //定义DLRU
                {1, 0}, {0, -1}, {0, 1}, {-1, 0}
                //{-1, 0}, {1, 0}, {0, -1}, {0, 1}
        };
        LinkedList<Node> queue = new LinkedList<Node>();
        Node fristnode = new Node(0, 0, "", null);
        queue.add(fristnode);
        map[0][0] = '1';
        Node temp=null;
        while (!queue.isEmpty()) {
            temp = queue.poll();
            for (int i = 0; i < 4; i++) {
                int newx = temp.x + fangxiang[i][0];
                int newy = temp.y + fangxiang[i][1];

                if (newx < 0 || newx >= 30 || newy < 0 || newy >= 50) {
                    continue;
                }

                if (map[newx][newy] == '1') {
                    continue;
                }

                String str1 = "";
                switch (i) {
                    case 0:
                        str1 = temp.dis + "D";
                        break;
                    case 1:
                        str1 = temp.dis + "L";
                        break;
                    case 2:
                        str1 = temp.dis + "R";
                        break;
                    case 3:
                        str1 = temp.dis + "U";
                        break;
                }

                Node addnode = new Node(newx, newy, str1, temp);

                if (newx == 29 && newy == 49) {
                    System.out.println("\n"+str1);
                    return;
                }

                map[newx][newy] = '1';
                queue.offerLast(addnode);
            }
        }

    }
}


